name: CI Stats Generation
on:
  workflow_dispatch: {}

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  ci-stats:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/github-script@v6
        with:
          script: |
            let commits = await github.rest.repos.listCommits({
              owner: 'apache',
              repo: 'helix',
            })
            
            let filteredCommits = commits.data.slice(0,3).map(c => c.sha)

            job_check_runs = []
            for (commit of filteredCommits) {
              let commitCheckRuns = await github.rest.checks.listForRef({
                owner: 'apache',
                repo: 'helix',
                ref: commit
              })
              let first_check_run_url = commitCheckRuns.data.check_runs.slice(-1)[0].html_url
              let first_run = first_check_run_url.replace("https://github.com/apache/helix/actions/runs/", "").replace(/\/job.*/, "")
              
              let first_run_response = await fetch("https://github.com/apache/helix/actions/runs/" + first_run)
              let first_run_response_str = await first_run_response.text()
              
              for (let i = 0; i < first_run_response_str.match(/job_\d+/g).length; i++) {
                job_check_run = first_run_response_str.match(/job_\d+/g)[i].replace("job_", "")
                job_check_runs.push(job_check_run)
              }
            }

            job_check_runs.sort()
            job_check_runs.reverse()
            job_check_runs = job_check_runs.slice(0, 15)
            
            ci_report_data = []
            for (check_run_id of job_check_runs) {
              let check_run_response = await github.rest.checks.get({
                owner: 'apache',
                repo: 'helix',
                check_run_id: check_run_id
              })

              let check_run_annotations_response = await github.rest.checks.listAnnotations({
                owner: 'apache',
                repo: 'helix',
                check_run_id: check_run_id
              })

              let check_run = check_run_response.data 
              let check_run_annotations = check_run_annotations_response.data

              if (check_run.name === "Tests Results") {
                let title = check_run.output.title

                let total_passed = +title.match(/(\d+) passed/g)[0].replace(" passed", "")
                let total_failed = +title.match(/(\d+) failed/g)[0].replace(" failed", "")
                let total_skipped = +title.match(/(\d+) skipped/g)[0].replace(" skipped", "")
                let report_data = {
                    "id": check_run.id,
                    "run_start_time": check_run.started_at,
                    "run_end_time": check_run.completed_at,
                    "status" : check_run.conclusion,
                    "total_passed": total_passed,
                    "total_failed": total_failed,
                    "total_skipped": total_skipped,
                    "result_link": check_run.html_url,
                    "annotations" : check_run_annotations
                }
                
                ci_report_data.push(report_data)
              }
            }

            var fs = require('fs');
            fs.writeFile("./_static/data/ci-data.json", JSON.stringify(ci_report_data), function(err) {
              if (err) {
                console.log(err);
              }
            });
      - name: Set git config
        run: |
          git config user.name $GITHUB_ACTOR
          git config user.email actions@"$RUNNER_NAME".local            
      - name: Check if there are any changes
        id: verify_diff
        run: |
          git diff --quiet . || echo "changed=true" >> $GITHUB_OUTPUT
      - name: Commit and Push to CI reporting branch
        if: steps.verify_diff.outputs.changed == 'true'      
        run: |
          git add *
          git commit -m "Github Action Automated Run: Added Test data"
          git push origin main
      - name: Setup Pages
        uses: actions/configure-pages@v4
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: '.'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4          
            

